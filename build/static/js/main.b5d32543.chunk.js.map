{"version":3,"sources":["storage/storage.js","components/boardBox.jsx","utility/functions.js","components/board.jsx","components/scoreboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Storage","storageName","initialValue","this","localStorage","getItem","setItem","JSON","parse","data","stringify","Box","props","className","value","onClick","findWinner","boxes","rows","i","length","a","b","c","areAllBoxesClicked","count","forEach","item","Board","storage","handleBoardRestart","setState","Array","fill","history","xIsNext","endGame","state","index","slice","utils","push","status","winner","isFilled","update","to","data-target","id","href","handleBoxClick","map","move","key","React","Component","Scoreboard","scoreboard","getData","leader","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5d32543.chunk.js","sourcesContent":["// Local storeage stuff\n\nexport class Storage {\n    constructor(storageName = 'gameScoreboard', initialValue = '[]') {\n        this.storageName = storageName\n        if (!localStorage.getItem(storageName)) {\n            localStorage.setItem(storageName, initialValue)\n        }\n    }\n\n    getData() {\n        return JSON.parse(localStorage.getItem(this.storageName))\n    }\n\n    update(data) {\n        localStorage.setItem(this.storageName, JSON.stringify(data))\n    }\n}","import React from 'react'\n\nexport default function Box(props) {\n    return (\n        <div className={`boardBox ${props.value}`} onClick={props.onClick}></div>\n    )\n}","export function findWinner(boxes) {\n    // Array with winning combinations\n    const rows = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n\n    // check combinations\n    for (let i = 0; i < rows.length; i++) {\n        const [a, b, c] = rows[i]\n\n        // Check if the game board contains winning combination\n        if (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\n            // Return the winner\n            return boxes[a]\n        }\n    }\n    return null\n}\n\nexport function areAllBoxesClicked(boxes) {\n    let count = 0\n    boxes.forEach(function (item) {\n        if (item !== null) {\n            count++\n        }\n    })\n    if (count === 9) {\n        return true\n    } else {\n        return false\n    }\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Storage } from '../storage/storage'\nimport Box from './boardBox'\nimport * as utils from '../utility/functions'\n\nexport class Board extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            boxes: Array(9).fill(null),\n            history: [],\n            xIsNext: true,\n            endGame: false,\n        }\n    }\n\n    storage = new Storage()\n\n    handleBoxClick(index) {\n        const boxes = this.state.boxes.slice()\n        let history = this.state.history\n        if (utils.findWinner(boxes) || boxes[index]) {\n            return\n        }\n        if (utils.areAllBoxesClicked(boxes) === true) {\n            this.setState({ endGame: true })\n            return\n        }\n        boxes[index] = this.state.xIsNext ? 'x' : 'o'\n        history.push(this.state.xIsNext ? 'x' : 'o')\n        this.setState({\n            boxes: boxes,\n            history: history,\n            xIsNext: !this.state.xIsNext\n        })\n    }\n    handleBoardRestart = () => {\n        this.setState({\n            boxes: Array(9).fill(null),\n            history: [],\n            xIsNext: true,\n            endGame: false,\n        })\n    }\n\n    render() {\n        // Get winner (if there is any)\n        const winner = utils.findWinner(this.state.boxes)\n\n        // Are all boxes checked?\n        const isFilled = utils.areAllBoxesClicked(this.state.boxes)\n\n        // Status message\n        let status\n\n        if (winner) {\n            // If winner exists, create status message\n            status = `The winner is: ${winner}!`\n\n            // Push data about the game to storage\n            this.storage.update([`${winner} won`])\n        } else if (!winner && isFilled) {\n            // If game is drawn, create status message\n            status = 'Game drawn!'\n            this.storage.update(['Game drawn'])\n        } else {\n            status = `It is ${(this.state.xIsNext ? 'x' : 'o')}'s turn.`\n        }\n\n        return (\n            <div>\n                <section className=\"hero is-black is-fullheight\">\n                    <div className=\"hero-head\">\n                        <header className=\"navbar\">\n                            <div className=\"container\">\n                                <div className=\"navbar-brand\">\n                                    <Link className=\"navbar-item\" to=\"/\">\n                                        <h1 className=\"title is-4\">Ting-Tang-Tong</h1>\n                                    </Link>\n                                    <span className=\"navbar-burger burger\" data-target=\"navbarMenuHeroC\">\n                                        <span></span>\n                                        <span></span>\n                                        <span></span>\n                                    </span>\n                                </div>\n                                <div id=\"navbarMenuHeroC\" className=\"navbar-menu\">\n                                    <div className=\"navbar-end\">\n                                        <span className=\"navbar-item\">\n                                            <a href=\"https://github.com/roeintheglasses/ting-tang-tong\" className=\"button is-dark is-inverted\">\n                                                <span className=\"icon\">\n                                                    <i className=\"fab fa-github\"></i>\n                                                </span>\n                                                <span>Fork</span>\n                                            </a>\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                        </header>\n                    </div>\n\n                    <div className=\"hero-body\">\n                        <div className=\"container has-text-centered\">\n                            <h1 className=\"title\">\n                                Ting-Tang-Tong\n                        </h1>\n                            <h2 className=\"subtitle is-5 mt-5\">\n                                Because tic-tac-toe sounds like a basic bitch.\n                        </h2>\n                            <h2 className=\"subtitle is-3 mt-5\">{status}</h2>\n                            {(this.state.endGame || winner) && <div className=\"boardFooter\">\n                                <button className=\"btn\" onClick={this.handleBoardRestart}>Start new game</button>\n                            </div>}\n                            <div className=\"main\">\n                                <Link to=\"/\" className=\"boardLink has-text-white\">Go back to scoreboard</Link>\n\n                                <div className=\"container\">\n                                    <br /><br />\n                                    <div className=\"boardWrapper\">\n                                        <div className=\"board\">\n                                            <div className=\"boardRow\">\n                                                <Box value={this.state.boxes[0]} onClick={() => this.handleBoxClick(0)} />\n\n                                                <Box value={this.state.boxes[1]} onClick={() => this.handleBoxClick(1)} />\n\n                                                <Box value={this.state.boxes[2]} onClick={() => this.handleBoxClick(2)} />\n                                            </div>\n                                            <div className=\"boardRow\">\n                                                <Box value={this.state.boxes[3]} onClick={() => this.handleBoxClick(3)} />\n\n                                                <Box value={this.state.boxes[4]} onClick={() => this.handleBoxClick(4)} />\n\n                                                <Box value={this.state.boxes[5]} onClick={() => this.handleBoxClick(5)} />\n                                            </div>\n                                            <div className=\"boardRow\">\n                                                <Box value={this.state.boxes[6]} onClick={() => this.handleBoxClick(6)} />\n\n                                                <Box value={this.state.boxes[7]} onClick={() => this.handleBoxClick(7)} />\n\n                                                <Box value={this.state.boxes[8]} onClick={() => this.handleBoxClick(8)} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <br /><br /> <br />\n                                    <div className=\"container\"></div>\n                                    <div className=\"boardHistory box\">\n\n                                        <h2 className=\"boardHeading\">Moves history:</h2>\n\n                                        <ul className=\"boardHistoryList\">\n                                            {this.state.history.length === 0 && <span>No moves to show.</span>}\n\n                                            {this.state.history.length !== 0 && this.state.history.map((move, index) => {\n                                                return <li key={index}>Move {index + 1}: <strong>{move}</strong></li>\n                                            })}\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </div >\n\n        )\n    }\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Storage } from '../storage/storage'\n\n\nexport class Scoreboard extends React.Component {\n    state = {\n        scoreboard: []\n    }\n    async componentDidMount() {\n        let storage = await new Storage().getData()\n\n        this.setState({\n            scoreboard: storage\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <section className=\"hero is-black is-fullheight\">\n                    <div className=\"hero-head\">\n                        <header className=\"navbar\">\n                            <div className=\"container\">\n                                <div className=\"navbar-brand\">\n                                    <Link className=\"navbar-item\" to=\"/\">\n                                        <h1 className=\"title is-4\">Ting-Tang-Tong</h1>\n                                    </Link>\n                                    <span className=\"navbar-burger burger\" data-target=\"navbarMenuHeroC\">\n                                        <span></span>\n                                        <span></span>\n                                        <span></span>\n                                    </span>\n                                </div>\n                                <div id=\"navbarMenuHeroC\" className=\"navbar-menu\">\n                                    <div className=\"navbar-end\">\n                                        <span className=\"navbar-item\">\n                                            <a href=\"https://github.com/roeintheglasses/ting-tang-tong\" className=\"button is-dark is-inverted\">\n                                                <span className=\"icon\">\n                                                    <i className=\"fab fa-github\"></i>\n                                                </span>\n                                                <span>Fork</span>\n                                            </a>\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                        </header>\n                    </div>\n\n                    <div className=\"hero-body\">\n                        <div className=\"container has-text-centered\">\n                            <h1 className=\"title\">\n                                Ting-Tang-Tong\n                            </h1>\n                            <h2 className=\"subtitle is-5 mt-5\">\n                                Because tic-tac-toe sounds like a basic bitch.\n                            </h2>\n                            <Link to=\"/board\">\n                                <button className=\"btn\">Start new game</button>\n                            </Link>\n\n                            <br /><br /> <br /><br />\n\n                            <div className=\"game\">\n                                <h1 className=\"subtitle is-3\" >Recent game stats:</h1>\n                                <ul>\n                                    {this.state.scoreboard.map((leader, key) => {\n                                        return <li key={key}>{leader}</li>\n                                    })}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </div>\n\n        )\n    }\n}","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { Board } from './components/board'\nimport { Scoreboard } from './components/scoreboard'\nimport './styles/app.css'\nimport './styles/board.css'\nimport './styles/box.css'\nimport './styles/buttons.css'\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <BrowserRouter>\n        <Route exact path=\"/\" component={Scoreboard} />\n        <Route path=\"/board\" component={Board} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}